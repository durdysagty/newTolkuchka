@model IList<(string name, Product product, IList<Promo> promos)>
@using newTolkuchka.Services.Interfaces
@inject IPath _pathService

@if (Model != null)
{
    int current = ViewBag.Current;
    int n = 0;
    foreach ((string name, Product p, IList<Promo> promos) in Model)
    {
        string id = $"pr{p.Id}";
        string imgId = $"img{p.Id}";
        string currentProduct = p.Id == current ? "d-block" : "d-none";
        string buttonName = "order" + p.Id;
        string buttonLikeName = "like" + p.Id;
        string tabsId = $"tab{p.Id}";
        string contentId = $"content{p.Id}";
        string descTab = $"decTab{p.Id}";
        string specTab = $"specTab{p.Id}";
        string descContent = $"decCon{p.Id}";
        string specContent = $"specCon{p.Id}";
        string quantityId = $"q{p.Id}";
        IList<string> imagePaths = new List<string>();
        Promo discount = promos.FirstOrDefault(pp => pp.Type == Tp.Discount);
        @for (int i = 0; i < ConstantsService.PRODUCTMAXIMAGE; i++)
        {
            if (File.Exists(_pathService.GetImagePath(ConstantsService.PRODUCT, p.Id, i) + ConstantsService.WEBP))
                imagePaths.Add(PathService.GetImageRelativePath(ConstantsService.PRODUCT, p.Id, i));
            else
                break;
        }
        <div id="@id" class="@currentProduct">
            <h4>@name</h4>
            <div class="row justify-content-center justify-content-lg-start">
                <div class="col-12 col-sm-6 col-md-4">
                    <div class="row">
                        <div class="col-auto col-sm-11 col-md-12 col-lg-10" role="button" onclick="showGalery(@n)">
                            @Html.Raw(IImage.GetImageHtml(PathService.GetImageRelativePath(ConstantsService.PRODUCT, p.Id), 600, 600, "100%", "auto", name, null, null, imgId))
                        </div>
                        <div class="col-auto col-sm-1 col-md-auto col-lg-2 my-2 my-md-0 px-0 pt-1">
                            @for (int i = 0; i < imagePaths.Count; i++)
                            {
                                @Html.Raw(IImage.GetImageHtml(imagePaths[i], 200, 200, "5rem", "auto", p.Model.Brand.Name, null, $" role=\"button\" onclick=\"setImage({imgId}, {i})\""))
                            }
                        </div>
                    </div>
                </div>
                <div class="gallery" style="display: none">
                    @for (int i = 0; i < imagePaths.Count; i++)
                    {
                        string src = $"{imagePaths[i]}{ConstantsService.JPG}";
                        <a href="@src">
                            @IImage.GetImageHtml(PathService.GetImageRelativePath(ConstantsService.BRAND, p.Model.Brand.Id), 180, 60, "100%", "auto", p.Model.Brand.Name)
                        </a>
                    }
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 d-flex flex-column justify-content-end">
                    @if (Model.Count() > 1)
                    {
                        // only if model count more than 1 wee need selection buttons from list of models
                        IEnumerable<Product> products = Model.Select(m => m.product);
                        // to select specs from
                        IList<ModelWithList<ModelWithList<AdminSpecsValueMod>>> nameUsedSpecs = ViewBag.Specs;
                        // get ids of name used specs to test product specValues
                        IEnumerable<int> namedSpecIds = ViewBag.SpecIds;
                        // for galery index if model more than one
                        n++;
                        <div class="d-flex flex-column justify-content-end align-items-start mb-3">
                            @foreach (ModelWithList<ModelWithList<AdminSpecsValueMod>> spec in nameUsedSpecs)
                            {
                                // looping through nameusedSpecs
                                <div><strong>@spec.Name</strong></div>
                                <div class="d-flex">
                                    @foreach (ModelWithList<AdminSpecsValueMod> specsValue in spec.List)
                                    {
                                        // looping through specsValue of this spec
                                        @foreach (AdminSpecsValueMod specsValueMod in specsValue.List)
                                        {
                                            // looping through specsValueMod of this specValue
                                            // check is this specsValueMod is presented in active Product
                                            // if specsValueMod.Id equal to 0 we need to select the Products by specsValueId and no one of specsValueMods of given Products have to belong to this specsValue
                                            // if specsValueMod.Id not equal to 0 we just seek products that match to given specsValueMod
                                            bool isActive = specsValueMod.Id == 0 ? p.ProductSpecsValues.Any(x => x.SpecsValueId == specsValue.Id) && !p.ProductSpecsValueMods.Any(x => x.SpecsValueMod.SpecsValueId == specsValue.Id) : p.ProductSpecsValueMods.Any(x => x.SpecsValueModId == specsValueMod.Id);
                                            // function to select Product by click
                                            string function = null;
                                            // border of element if Product is Active
                                            string border = null;
                                            if (isActive)
                                                border = "border-primary";
                                            else
                                            {
                                                // if Product is not presented by this specsValueMod we start seeaking a product that matches to other of specsValues and specsValueMods of given product, or closest to given Product by specsValues and specsValueMods
                                                // excluding of Product we actual product
                                                IList<Product> seekingProducts = products.Where(x => x.Id != p.Id).ToList();
                                                // seeking by actual specsValue
                                                seekingProducts = seekingProducts.Where(x => x.ProductSpecsValues.Any(psv => psv.SpecsValueId == specsValue.Id)).ToList();
                                                // if Products count equal to one we got the product closest to actual product
                                                if (seekingProducts.Count > 1)
                                                {
                                                    // if Products more than 1, we try to check them by actual specsValueMod
                                                    // we can get no one Product that has this specsValueMod, that is why we need to check is we have any product that match to specsValueMod before continue
                                                    IEnumerable<Product> seekingProductsBySVM = specsValueMod.Id != 0 ?
                                                    seekingProducts.Where(x => x.ProductSpecsValueMods.Any(psvm => psvm.SpecsValueModId == specsValueMod.Id)).ToList() :
                                                    seekingProducts.Where(x => !x.ProductSpecsValueMods.Any(x => x.SpecsValueMod.SpecsValueId == specsValue.Id));
                                                    if (seekingProductsBySVM.Any())
                                                        seekingProducts = seekingProductsBySVM.ToList();
                                                }
                                                // if we have more than 1 Product that match to given specsValue or specsValueMod (the most of time)
                                                if (seekingProducts.Count > 1)
                                                {
                                                    // we start looping specsValues of given Product to find closest Product
                                                    // get specsValues of the Product those in namedSpecs but not in this Spec
                                                    IList<SpecsValue> otherSpecsValueOfProduct = p.ProductSpecsValues.Select(x => x.SpecsValue).Where(x => namedSpecIds.Contains(x.Spec.Id) && x.SpecId != spec.Id).ToList();
                                                    foreach (SpecsValue specsValueOfPoduct in otherSpecsValueOfProduct)
                                                    {
                                                        // we can get no one Product that has this specsValue, that is why we need to check is we have any product that match to specsValue before continue
                                                        IEnumerable<Product> seekingProductsBySV = seekingProducts.Where(x => x.ProductSpecsValues.Any(psv => psv.SpecsValueId == specsValueOfPoduct.Id)).ToList();
                                                        if (seekingProductsBySV.Any())
                                                        {
                                                            // if we have any Products matching to looping specsValueOfPoduct, then we update seekingProducts
                                                            seekingProducts = seekingProductsBySV.ToList();
                                                            if (seekingProducts.Count > 1)
                                                            {
                                                                // if we have more than 1 Product, we check the Products for matching of specsValueMod of the given Product
                                                                // get specswValueMod of given Product of given specsValue
                                                                SpecsValueMod specsValueModOfPoduct = p.ProductSpecsValueMods.Select(x => x.SpecsValueMod).FirstOrDefault(x => x.SpecsValueId == specsValueOfPoduct.Id);
                                                                // if we got a specsValueModOfPoduct that matching our purposes
                                                                if (specsValueModOfPoduct != null)
                                                                {
                                                                    // is any Products have specific specsValueMod
                                                                    IEnumerable<Product> seekingProductsBySVM = seekingProducts.Where(x => x.ProductSpecsValueMods.Any(psvm => psvm.SpecsValueModId == specsValueModOfPoduct.Id)).ToList();
                                                                    // of course we can get no one Product that has this specsValueMod, that is why we need to check is we have any Product that match to specsValueMod before continue
                                                                    if (seekingProductsBySVM.Any())
                                                                        seekingProducts = seekingProductsBySVM.ToList();
                                                                }
                                                            }
                                                        }
                                                        // if we came to only 1 product, we do not need seeking and looping breaks
                                                        if (seekingProducts.Count == 1)
                                                            break;
                                                    }
                                                }
                                                function = $"role=button onclick=getProduct({seekingProducts[0].Id})";
                                            }
                                            <div class="d-inline-block p-1 me-1 border rounded @border">
                                                @{

                                                    string vn = specsValueMod.Id == 0 ? specsValue.Name : specsValueMod.Name;
                                                    if (spec.Is)
                                                    {
                                                        @Html.Raw(IImage.GetImageHtml(PathService.GetImageRelativePath(ConstantsService.SPECSVALUE, specsValue.Id), 25, 25, "1.5rem", "auto", specsValue.Name, null, function, null, vn));
                                                    }
                                                    else
                                                    {
                                                        <span @function>@vn</span>
                                                    }
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                    <div class="d-flex flex-column justify-content-end align-items-center align-items-md-start mb-3">
                        <div class="mb-2">
                            <p>@Localizer["quantity"]</p>
                            <span role="button" class='pointer px-2 h3' onclick="quantity(@quantityId, false)">-</span>
                            <span class="h2" id="@quantityId">1</span>
                            <span role="button" class='pointer px-2 h3' onclick="quantity(@quantityId, true)">+</span>
                        </div>
                        @if (discount != null)
                        {
                            <div class="d-block"><h6><s>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)p.Price)</s></h6></div>
                            @if (CultureProvider.CurrentCulture == CultureProvider.Culture.Ru)
                            {
                                <p class="text-primary">@Localizer["promo-price"] <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, discount.Id)">"@discount.Name"</a>:</p>
                            }
                            else
                            {
                                <p class="text-primary"><a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, discount.Id)">"@discount.Name"</a> @Localizer["promo-price"]:</p>
                            }
                            <h4>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)(p.Price - p.Price * discount.Volume / 100))</h4>
                        }
                        else if (p.NewPrice != null)
                        {
                            <div class="d-block"><h6><s>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)p.Price)</s></h6></div>
                            <h4>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)p.NewPrice)</h4>
                        }
                        else
                        {
                            <h4>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)p.Price)</h4>
                        }
                        <div class="d-inline-flex">
                            <button name="@buttonName" onclick="productOrder(@p.Id, @quantityId)" type="button" class="btn btn-primary">@Localizer["add-to-cart"]</button>
                            <button name="@buttonLikeName" onclick="like(@p.Id)" type="button" class="btn btn-primary ms-2"><i class="fas fa-heart"></i></button>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-sm-12 col-md-4 col-lg-5 col-xl-6 d-flex flex-column justify-content-start align-items-center pt-2">
                    @if (p.IsRecommended)
                    {
                        <div class="badge badge-primary me-1">@Localizer["recod"]</div>
                    }
                    @if (p.IsNew)
                    {
                        <div class="badge badge-secondary me-1">@Localizer["newed"]</div>
                    }
                    <a href="@PathService.GetModelUrl($"https://{CultureProvider.Host}/{ConstantsService.BRAND}", p.Model.BrandId)">
                        @Html.Raw(IImage.GetImageHtml(PathService.GetImageRelativePath(ConstantsService.BRAND, p.Model.BrandId), 180, 60, "12rem", "auto", p.Model.Brand.Name))
                    </a>
                    @foreach (Promo promo in promos.Where(pr => pr.Type != Tp.Discount))
                    {
                        @if (promo.Type == Tp.QuantityDiscount)
                        {
                            switch (CultureProvider.CurrentCulture)
                            {
                                case CultureProvider.Culture.Ru:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Этот товар участвует в акции <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a>, скидка @((int)promo.Volume)%</p>
                                        <h4>При покупке не менее @promo.Quantity штук, цена - @CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)(p.Price - p.Price * promo.Volume / 100))</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.En:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">This product is part of the <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> promotion, @((int)promo.Volume)% off</p>
                                        <h4>Get @promo.Quantity at a price of @CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)(p.Price - p.Price * promo.Volume / 100))</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.Tm:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Bu haryt <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> aksiýasyna gatnaşýar, arzanladyş @((int)promo.Volume)%</p>
                                        <h4>@promo.Quantity sanysy - @CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)(p.Price - p.Price * promo.Volume / 100))</h4>
                                    </div>
                                    break;
                            }
                        }
                        @if (promo.Type == Tp.QuantityFree)
                        {
                            switch (CultureProvider.CurrentCulture)
                            {
                                case CultureProvider.Culture.Ru:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Этот товар участвует в акции <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a></p>
                                        <h4>Купите не менее @promo.Quantity штук и получите один БЕСПЛАТНО!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.En:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">This product is part of the <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> promotion</p>
                                        <h4>Buy @promo.Quantity pieces and get one FOR FREE!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.Tm:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Bu haryt <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> aksiýasyna gatnaşýar</p>
                                        <h4>@promo.Quantity sanysyny satyn alana biri MUGT!</h4>
                                    </div>
                                    break;
                            }
                        }
                        @if (promo.Type == Tp.ProductFree)
                        {
                            switch (CultureProvider.CurrentCulture)
                            {
                                case CultureProvider.Culture.Ru:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Этот товар участвует в акции <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a></p>
                                        <h4>Купите не менее @promo.Quantity штук и получите <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a> БЕСПЛАТНО!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.En:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">This product is part of the <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> promotion</p>
                                        <h4>Buy @promo.Quantity pieces and get <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a> FOR FREE!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.Tm:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Bu haryt <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> aksiýasyna gatnaşýar</p>
                                        <h4>@promo.Quantity sanysyny satyn alana <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a> MUGT!</h4>
                                    </div>
                                    break;
                            }
                        }
                        @if (promo.Type == Tp.Set)
                        {
                            switch (CultureProvider.CurrentCulture)
                            {
                                case CultureProvider.Culture.Ru:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Этот товар участвует в акции <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a></p>
                                        <p>Купите набор, состоящий из:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>и получите <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a> БЕСПЛАТНО!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.En:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">This product is part of the <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> promotion</p>
                                        <p>Buy a set consisting of:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>and get <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a> FOR FREE!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.Tm:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Bu haryt <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> aksiýasyna gatnaşýar</p>
                                        <p>Aşakdaky harytlaryň ahlisini satyn alana:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a> MUGT!</h4>
                                    </div>
                                    break;
                            }
                        }
                        @if (promo.Type == Tp.SetDiscount)
                        {
                            switch (CultureProvider.CurrentCulture)
                            {
                                case CultureProvider.Culture.Ru:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Этот товар участвует в акции <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a></p>
                                        <p>Купите набор, состоящий из:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>и получите СКИДКУ @((int)promo.Volume)% на весь набор!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.En:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">This product is part of the <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> promotion</p>
                                        <p>Buy a set consisting of:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>and get @((int)promo.Volume)% DISCOUNT on all products in the set!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.Tm:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Bu haryt <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> aksiýasyna gatnaşýar</p>
                                        <p>Aşakdaky harytlaryň ahlisini satyn alana:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>hemmesine @((int)promo.Volume)% ARZANLADYŞ!</h4>
                                    </div>
                                    break;
                            }
                        }
                        @if (promo.Type == Tp.SpecialSetDiscount)
                        {
                            switch (CultureProvider.CurrentCulture)
                            {
                                case CultureProvider.Culture.Ru:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Этот товар участвует в акции <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a></p>
                                        <p>Купите набор, состоящий из:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>и получите СКИДКУ @((int)promo.Volume)% при покупке <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a>!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.En:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">This product is part of the <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> promotion</p>
                                        <p>Buy a set consisting of:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>and get a @((int)promo.Volume)% DISCOUNT when buying <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a>!</h4>
                                    </div>
                                    break;
                                case CultureProvider.Culture.Tm:
                                    <div class="text-center mt-2">
                                        <p class="text-primary">Bu haryt <a href="/@PathService.GetModelUrl(ConstantsService.PROMOTION, promo.Id)">"@promo.Name"</a> aksiýasyna gatnaşýar</p>
                                        <p>Aşakdaky harytlaryň ahlisini satyn al:</p>
                                        @foreach (Product ps in promo.Products)
                                        {
                                            <p><a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, ps.Id)">@IProduct.GetProductNameCounted(ps)</a></p>
                                        }
                                        <h4>we <a href="/@PathService.GetModelUrl(ConstantsService.PRODUCT, promo.Subject.Id)">"@IProduct.GetProductNameCounted(promo.Subject)"</a> @((int)promo.Volume)% ARZANLADYŞLY satyn al!</h4>
                                    </div>
                                    break;
                            }
                        }
                    }
                </div>
            </div>
            <ul class="nav nav-tabs mb-3" id="@tabsId" role="tablist">
                <li class="nav-item" role="presentation">
                    <a class="nav-link active" id="@descTab" data-mdb-toggle="tab" href="#@descContent" role="tab" aria-controls="@descContent" aria-selected="true">@Localizer[ConstantsService.DESCRIPTION]</a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link" id="@specTab" data-mdb-toggle="tab" href="#@specContent" role="tab" aria-controls="@specContent" aria-selected="false">@Localizer[ConstantsService.SPECIFICATIONS]</a>
                </li>
            </ul>
            <div class="tab-content" id="@contentId">
                <div class="tab-pane fade show active" id="@descContent" role="tabpanel" aria-labelledby="@descTab">
                    <p>@CultureProvider.GetLocalName(p.Model.DescRu, p.Model.DescEn, p.Model.DescTm)</p>
                    <p>@CultureProvider.GetLocalName(p.DescRu, p.DescEn, p.DescTm)</p>
                </div>
                <div class="tab-pane fade" id="@specContent" role="tabpanel" aria-labelledby="@specTab">
                    <table class="table table-sm table-striped" style="max-width: 70rem">
                        <tbody>
                            @foreach (ModelSpec ms in p.Model.ModelSpecs.OrderBy(s => s.Spec.Order))
                            {
                                <tr>
                                    <td>@CultureProvider.GetLocalName(ms.Spec.NameRu, ms.Spec.NameEn, ms.Spec.NameTm)</td>
                                    @{
                                        SpecsValue sv = p.ProductSpecsValues.FirstOrDefault(x => x.SpecsValue.SpecId == ms.SpecId)?.SpecsValue; // if null
                                        @if (sv != null)
                                        {
                                            <td>@CultureProvider.GetLocalName(sv.NameRu, sv.NameEn, sv.NameTm)</td>
                                        }
                                        else
                                        {
                                            <td> - </td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    @section Scripts {
    <link rel="stylesheet" href="~/lib/baguette/box.css" asp-append-version="true" />
    <script src="~/lib/baguette/box.js" asp-append-version="true"></script>
    <script src="~/js/product.js" asp-append-version="true"></script>
        }
}
else
{
    await Html.RenderPartialAsync("_AllProducts", "notAvailable");
}