@model IList<(string name, Product product)>
@using newTolkuchka.Services.Interfaces
@inject IPath _pathService

@if (Model != null)
{
    int current = ViewBag.Current;
    int n = 0;
    foreach ((string name, Product p) in Model)
    {
        string id = $"pr{p.Id}";
        string imgId = $"img{p.Id}";
        string currentProduct = p.Id == current ? "d-block" : "d-none";
        string tabsId = $"tab{p.Id}";
        string contentId = $"content{p.Id}";
        string descTab = $"decTab{p.Id}";
        string specTab = $"specTab{p.Id}";
        string descContent = $"decCon{p.Id}";
        string specContent = $"specCon{p.Id}";
        IList<string> imagePaths = new List<string>();
        @for (int i = 0; i < ConstantsService.PRODUCTMAXIMAGE; i++)
        {
            if (File.Exists(_pathService.GetImagePath(ConstantsService.PRODUCT, p.Id, i)))
                imagePaths.Add(PathService.GetImageRelativePath(ConstantsService.PRODUCT, p.Id, i));
            else
                break;
        }
        <div id="@id" class="@currentProduct">
            <h4>@name</h4>
            <div class="row justify-content-between justify-content-lg-start">
                <div class="col-12 col-md-4">
                    <div class="row">
                        <div class="col-auto col-sm-11 col-md-12 col-lg-10">
                            <img role="button" id="@imgId" onclick="showGalery(@n)" width="600" height="600" style="width: 100%; height: auto" alt="@p.Model.Brand.Name" src="@imagePaths[0]" />
                        </div>
                        <div class="col-auto col-sm-1 col-md-auto col-lg-2 my-2 my-md-0 px-0 pt-1">
                            @for (int i = 0; i < imagePaths.Count; i++)
                            {
                                <img role="button" width="200" height="200" style="width: 100%; height: auto; max-width: 4rem" alt="@p.Model.Brand.Name" src="@imagePaths[i]" onclick="setImage(@imgId, @i)" />
                            }
                        </div>
                    </div>
                </div>
                <div class="gallery" style="display: none">
                    @for (int i = 0; i < imagePaths.Count; i++)
                    {
                        <a href="@imagePaths[i]">
                            <img role="button" width="200" height="200" style="width: 100%; height: auto; max-width: 4rem" alt="@p.Model.Brand.Name" src="@imagePaths[i]" onclick="setImage(@imgId, @i)" />
                        </a>
                    }
                </div>
                @*<div class="col-12 col-md-1 my-2 my-md-0">
        <div class="d-flex d-md-block">
        @for (int i = 0; i < ConstantsService.PRODUCTMAXIMAGE; i++)
        {
        if (File.Exists(_pathService.GetImagePath(ConstantsService.PRODUCT + "/small", p.Id, i)))
        {
        <img role="button" width="200" height="200" style="width: 4rem; height: auto" alt="@p.Brand.Name" src="@PathService.GetImageRelativePath(ConstantsService.PRODUCT + "/small", p.Id, i)" onclick="setImage(@imgId, @i)" />
        }
        else
        break;
        }
        </div>
        </div>*@
                <div class="col-auto d-flex flex-column justify-content-end">
                    @if (Model.Count() > 1)
                    {
                        IEnumerable<Product> products = Model.Select(m => m.product);
                        // to select specs from
                        IList<ModelWithList<SpecsValue>> nameUsedSpecs = ViewBag.Specs;
                        // get ids of name used specs to test product specValues
                        IEnumerable<int> namedSpecIds = ViewBag.SpecIds;
                        // for galery index if model more than one
                        n++;
                        <div class="d-flex flex-column justify-content-end align-items-start mb-3">
                            @foreach (ModelWithList<SpecsValue> s in nameUsedSpecs)
                            {
                                <div><strong>@s.Name</strong></div>
                                <div class="d-flex">
                                    @foreach (SpecsValue sv in s.List)
                                    {
                                        // is this specsvalue in current product
                                        bool isActive = p.ProductSpecsValues.Any(x => x.SpecsValueId == sv.Id);
                                        string function = null;
                                        string border = null;
                                        int? getIp = null;
                                        if (isActive)
                                            border = "border-primary";
                                        else
                                        {
                                            // get specsvalues that is in current product but not in this spec
                                            IList<SpecsValue> currentSV = p.ProductSpecsValues.Select(x => x.SpecsValue).Where(x => namedSpecIds.Contains(x.Spec.Id) && x.SpecId != s.Id).ToList();
                                            // the sv is not in current product thus add sv to currentSV and seek the product that is got all svs
                                            currentSV.Add(sv);
                                            getIp = products.FirstOrDefault(m => m.ProductSpecsValues.Select(x => x.SpecsValue).Where(x => namedSpecIds.Contains(x.Spec.Id)).All(x => currentSV.Any(y => y.Id == x.Id)))?.Id;
                                            // if there is no product that matchs with given spec values (with current product specs values)
                                            if (getIp == null)
                                            {
                                                // is any products of given model has ProductsSpecsValue with given SpecsValue
                                                IList<Product> seekingProducts = products.Where(m => m.Id != p.Id && m.ProductSpecsValues.Any(psv => psv.SpecsValueId == sv.Id)).ToList();
                                                // if more than one product has given SpecsValue
                                                if (seekingProducts.Count > 1)
                                                {
                                                    // get all specsvalues by specs list except looped spec and specsvalues except actual product specsvalues
                                                    IEnumerable<IEnumerable<SpecsValue>> specsValuesList = nameUsedSpecs.Where(x => x.Id != s.Id).Select(s => s.List.Where(v => p.ProductSpecsValues.Any(psv => psv.SpecsValueId != v.Id)));
                                                    // loop all specs
                                                    foreach (IEnumerable<SpecsValue> specsValues in specsValuesList)
                                                    {
                                                        // loop all specs value of given spec
                                                        foreach (SpecsValue specsValue in specsValues)
                                                        {
                                                            IList<Product> testProducts = seekingProducts.Where(s => s.ProductSpecsValues.Any(psv => psv.SpecsValueId == specsValue.Id)).ToList();
                                                            // if we got any products we need to constrict seekingproducts, no need if we did not get any product
                                                            if (testProducts.Any())
                                                                seekingProducts = testProducts;
                                                            // if count constricted to 1, then break, we got that son of a bitch
                                                            if (seekingProducts.Count == 1)
                                                                break;
                                                        }
                                                        // if count constricted to 1, no need to continue
                                                        if (seekingProducts.Count == 1)
                                                            break;
                                                    }
                                                }
                                                getIp = seekingProducts.FirstOrDefault().Id;
                                                @*  // we start to seek the product that not correspond with actual ptoduct specs values
                    foreach (ModelWithList<SpecsValue> s2 in specs.Where(x => x.Id != s.Id))
                    {
                    SpecsValue toRemove = currentSV.FirstOrDefault(x => s2.List.Any(y => y.Id == x.Id));
                    currentSV.Remove(toRemove);
                    foreach(var sv2 in s2.List.Where(x => x.Id != toRemove.Id))
                    {
                    // SpecsValue toRemove = currentSV.FirstOrDefault(x => x.Id == s2.Id);
                    // currentSV.Remove(toRemove);
                    currentSV.Add(sv2);
                    getIp = Model.SingleOrDefault(m => m.ProductSpecsValues.Select(x => x.SpecsValue).Where(x => x.Spec.NamingOrder != null).All(x => currentSV.Any(y => y.Id == x.Id)))?.Id;
                    if (getIp != null)
                    break;
                    currentSV.Remove(sv2);

                    }
                    if (getIp != null)
                    break;
                    currentSV.Add(toRemove);
                    }*@
                                            }
                                            function = $"role=button onclick=getProduct({getIp})";
                                        }

                                        <div class="d-inline-block p-1 me-1 border rounded @border">
                                            @if (s.Is)
                                            {
                                                <img width="25" height="25" style="width: 1.5rem; height: auto" src="@PathService.GetImageRelativePath(ConstantsService.SPECSVALUE, sv.Id)" title="@CultureProvider.GetLocalName(sv.NameRu, sv.NameEn, sv.NameTm)" alt="@CultureProvider.GetLocalName(sv.NameRu, sv.NameEn, sv.NameTm)" @function />
                                            }
                                            else
                                            {
                                                <span @function>@CultureProvider.GetLocalName(sv.NameRu, sv.NameEn, sv.NameTm)</span>
                                            }
                                        </div>

                                    }
                                </div>
                            }
                        </div>
                    }
                    <div class="d-flex flex-column justify-content-end align-items-center align-items-md-start mb-3">
                        @if (p.NewPrice != null)
                        {
                            <div class="d-block"><h6><s>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)p.Price)</s></h6></div>
                            <h4>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)p.NewPrice)</h4>
                        }
                        else
                        {
                            <h4>@CurrencyService.Currency.CodeName @IProduct.GetConvertedPrice((decimal)p.Price)</h4>
                        }
                        @{
                            string buttonName = "order" + p.Id;
                            string buttonLikeName = "like" + p.Id;
                        }
                        <div class="d-inline-flex">
                            <button name="@buttonName" onclick="order(@p.Id)" type="submit" class="btn btn-primary">@Localizer["add-to-cart"]</button>
                            <button name="@buttonLikeName" onclick="like(@p.Id)" type="submit" class="btn btn-primary ms-2"><i class="fas fa-heart"></i></button>
                        </div>
                    </div>
                </div>
                <div class="col-auto d-flex flex-column justify-content-start align-items-start pt-2">
                    @if (p.IsRecommended)
                    {
                        <div class="badge badge-primary me-1">@Localizer["recod"]</div>
                    }
                    @if (p.IsNew)
                    {
                        <div class="badge badge-secondary me-1">@Localizer["newed"]</div>
                    }
                    <a href="@PathService.GetModelUrl($"https://{CultureProvider.Host}/{ConstantsService.BRAND}", p.Model.BrandId)">
                        <img role="button" width="180" height="60" style="width: 12rem; height: auto" alt="@p.Model.Brand.Name" src="@PathService.GetImageRelativePath($"{ConstantsService.BRAND}", p.Model.BrandId)" />
                    </a>
                </div>
            </div>
            <ul class="nav nav-tabs mb-3" id="@tabsId" role="tablist">
                <li class="nav-item" role="presentation">
                    <a class="nav-link active" id="@descTab" data-mdb-toggle="tab" href="#@descContent" role="tab" aria-controls="@descContent" aria-selected="true">@Localizer[ConstantsService.DESCRIPTION]</a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link" id="@specTab" data-mdb-toggle="tab" href="#@specContent" role="tab" aria-controls="@specContent" aria-selected="false">@Localizer[ConstantsService.SPECIFICATIONS]</a>
                </li>
            </ul>
            <div class="tab-content" id="@contentId">
                <div class="tab-pane fade show active" id="@descContent" role="tabpanel" aria-labelledby="@descTab">
                    <p>@CultureProvider.GetLocalName(p.Model.DescRu, p.Model.DescEn, p.Model.DescTm)</p>
                    <p>@CultureProvider.GetLocalName(p.DescRu, p.DescEn, p.DescTm)</p>
                </div>
                <div class="tab-pane fade" id="@specContent" role="tabpanel" aria-labelledby="@specTab">
                    <table class="table table-sm table-striped" style="max-width: 70rem">
                        <tbody>
                            @foreach (ModelSpec ms in p.Model.ModelSpecs.OrderBy(s => s.Spec.Order))
                            {
                                <tr>
                                    <td>@CultureProvider.GetLocalName(ms.Spec.NameRu, ms.Spec.NameEn, ms.Spec.NameTm)</td>
                                    @{
                                        SpecsValue sv = p.ProductSpecsValues.FirstOrDefault(x => x.SpecsValue.SpecId == ms.SpecId)?.SpecsValue; // if null
                                        @if (sv != null)
                                        {
                                            <td>@CultureProvider.GetLocalName(sv.NameRu, sv.NameEn, sv.NameTm)</td>
                                        }
                                        else
                                        {
                                            <td> - </td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    @section Scripts {
    <link rel="stylesheet" href="~/lib/baguette/box.css" asp-append-version="true" />
    <script src="~/lib/baguette/box.js" asp-append-version="true"></script>
    <script src="~/js/product.js" asp-append-version="true"></script>
        }
}
else
{
    <div style="height: 50vh" class="d-flex justify-content-center align-items-center">
        <div>
            <p class="text-center">@Localizer["notAvailable"]</p>
            <h4 class="text-center"><a href="/categories" class="text-brown">@Localizer["all"]</a></h4>
        </div>
    </div>
}